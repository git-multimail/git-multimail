At each release:

* In git.git, check for changes and possibly backport them:
  git log contrib/hooks/multimail

* Test with various versions of Python and Git, add "This version has
  been tested with Python ... and Git ..." to CHANGES.

* Update version number in git_multimail.py

* Add version number in README

* Remove "In progress" from CHANGES

* Run manual tests:

  - gerrit with vagrant: ../t/gerrit/README.rst

  - smtp mailer: ../t/test-email-config

* Commit and tag the result

* push & release on GitHub

* Release to Git::

 ./copy-to-git.sh <path-to-git>

(and send to the Git mailing-list, using ./list-contribs.sh for the
commit message)

* release on pypi::

 python setup.py sdist upload -r pypi

After a stable release:

* Create a branch for maintenance releases

* Remove version number from README

* Update version number to 1.x.dev in git_multimail.py

* Create section for future release in git-multimail/CHANGES

* git commit -m "Prepare for next release" && git push
