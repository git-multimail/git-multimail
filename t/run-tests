#!/bin/sh

d=$(dirname "$0")
cd "${d}" || exit 1
. ./helper-functions.sh || exit 1

retcode=0
errors=
record_error () {
    errors="$errors $1"
    retcode=1
}

for c in \
    python2 \
    pep8 \
    git \
    rstcheck \
    ;
do
    unset "${c}"_installed
    ver=unavailable
    if command -v "${c}" >/dev/null 2>&1
    then
	ver=$("${c}" --version 2>&1)
	ver=${ver##* }
	eval "${c}_installed=true"
    fi
    log "${c} version: ${ver}"
done

log

if [ -z "${git_installed+set}" ]
then
    error "git not installed"
    record_error sign-off
elif ! ./check-sign-off
then
    record_error sign-off
else
    log "Each commit has a sign-off: PASS"
fi

rstcheck_file () {
    if [ -z "${rstcheck_installed+set}" ]
    then
	error "rstcheck not installed"
	record_error RST
    elif ! rstcheck ../"$1" >rstcheck.out 2>&1 ||
	test -s rstcheck.out
    then
	cat rstcheck.out
	record_error RST
    else
	log "No RST error in $1: PASS"
    fi
}
rstcheck_file README.rst
rstcheck_file doc/gitolite.rst

# W503: line break before binary operator => could eventually be
# removed, but at a moment where there are less pending PRs.
#
# E402: module level import not at top of file => we need this in the
# tests.
#
# E501: line too long (... characters) => we don't have _very_ long
# lines, but we could get better.
#
# E123: closing bracket does not match indentation of opening bracket's line
# => not raised on all pep8 version, and really constraining. We can
# probably keep ignoring it forever.
pep8_file () {
    if [ -z "${pep8_installed+set}" ]
    then
	error "pep8 not installed"
	record_error PEP8
    elif ! pep8 ../"$1" --ignore=W503,E402,E501,E123
    then
	record_error PEP8
    else
	log "No new PEP8 error in $1 found: PASS"
    fi
}
pep8_file git-multimail/git_multimail.py
pep8_file t/test-env

if [ -z "${python2_installed+set}" ]
then
    error "python2 not installed"
    record_error test-email-content
elif ! ./test-email-content
then
    record_error test-email-content
else
    echo "test-email-content: PASS"
fi

if [ -z "${python2_installed+set}" ]
then
    error "python2 not installed"
    record_error test-env
elif ! ./test-env
then
    record_error test-env
else
    echo "test-env: PASS"
fi

if [ -n "$errors" ]
then
    error "failed tests:$errors"
fi

exit $retcode
